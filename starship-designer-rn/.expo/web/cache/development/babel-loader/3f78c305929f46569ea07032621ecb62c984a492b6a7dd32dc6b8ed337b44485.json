{"ast":null,"code":"export var TECH_LEVELS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\nexport var HULL_SIZES = [{\n  tonnage: 100,\n  code: '1',\n  cost: 2\n}, {\n  tonnage: 200,\n  code: '2',\n  cost: 8\n}, {\n  tonnage: 300,\n  code: '3',\n  cost: 12\n}, {\n  tonnage: 400,\n  code: '4',\n  cost: 16\n}, {\n  tonnage: 500,\n  code: '5',\n  cost: 32\n}, {\n  tonnage: 600,\n  code: '6',\n  cost: 48\n}, {\n  tonnage: 700,\n  code: '7',\n  cost: 64\n}, {\n  tonnage: 800,\n  code: '8',\n  cost: 80\n}, {\n  tonnage: 900,\n  code: '9',\n  cost: 90\n}, {\n  tonnage: 1000,\n  code: 'A',\n  cost: 100\n}, {\n  tonnage: 1200,\n  code: 'C',\n  cost: 120\n}, {\n  tonnage: 1400,\n  code: 'E',\n  cost: 140\n}, {\n  tonnage: 1600,\n  code: 'G',\n  cost: 160\n}, {\n  tonnage: 1800,\n  code: 'J',\n  cost: 180\n}, {\n  tonnage: 2000,\n  code: 'L',\n  cost: 200\n}];\nexport var WEAPON_TYPES = [{\n  name: 'Hard Point',\n  mass: 0,\n  cost: 0.2\n}, {\n  name: 'Single Turret',\n  mass: 1,\n  cost: 0.5\n}, {\n  name: 'Double Turret',\n  mass: 1,\n  cost: 1\n}, {\n  name: 'Triple Turret',\n  mass: 1,\n  cost: 2\n}, {\n  name: 'Beam Laser',\n  mass: 1,\n  cost: 1\n}, {\n  name: 'Pulse Laser',\n  mass: 1,\n  cost: 2\n}, {\n  name: 'Particle Beam',\n  mass: 1,\n  cost: 4\n}, {\n  name: 'Fusion Gun',\n  mass: 1,\n  cost: 8\n}, {\n  name: 'Meson Gun',\n  mass: 5,\n  cost: 50\n}, {\n  name: 'Missile Rack',\n  mass: 0.5,\n  cost: 0.75\n}, {\n  name: 'Torpedo Tube',\n  mass: 1,\n  cost: 1.5\n}];\nexport var DEFENSE_TYPES = [{\n  name: 'Sandcaster Turret',\n  type: 'sandcaster_turret',\n  mass: 1,\n  cost: 1.3\n}, {\n  name: 'Dual Sandcaster Turret',\n  type: 'dual_sandcaster_turret',\n  mass: 1,\n  cost: 1.5\n}, {\n  name: 'Triple Sandcaster Turret',\n  type: 'triple_sandcaster_turret',\n  mass: 1,\n  cost: 1.8\n}, {\n  name: 'Point Defense Laser Turret',\n  type: 'point_defense_laser_turret',\n  mass: 1,\n  cost: 1\n}, {\n  name: 'Dual Point Defense Laser Turret',\n  type: 'dual_point_defense_laser_turret',\n  mass: 1,\n  cost: 1.5\n}];\nexport var BERTH_TYPES = [{\n  name: 'Staterooms',\n  type: 'staterooms',\n  mass: 4,\n  cost: 0.5,\n  required: true\n}, {\n  name: 'Luxury Staterooms',\n  type: 'luxury_staterooms',\n  mass: 5,\n  cost: 0.6,\n  required: false\n}, {\n  name: 'Low Berths',\n  type: 'low_berths',\n  mass: 0.5,\n  cost: 0.05,\n  required: false\n}, {\n  name: 'Emergency Low',\n  type: 'emergency_low_berth',\n  mass: 1,\n  cost: 1,\n  required: false\n}];\nexport var FACILITY_TYPES = [{\n  name: 'Gym',\n  type: 'gym',\n  mass: 3,\n  cost: 0.1\n}, {\n  name: 'Spa',\n  type: 'spa',\n  mass: 1.5,\n  cost: 0.2\n}, {\n  name: 'Garden',\n  type: 'garden',\n  mass: 4,\n  cost: 0.05\n}, {\n  name: 'Commissary',\n  type: 'commissary',\n  mass: 2,\n  cost: 0.2,\n  required: true\n}, {\n  name: 'Kitchens',\n  type: 'kitchens',\n  mass: 3,\n  cost: 0.4\n}, {\n  name: 'Officers Mess & Bar',\n  type: 'officers_mess_bar',\n  mass: 4,\n  cost: 0.3\n}, {\n  name: 'First Aid Station',\n  type: 'first_aid_station',\n  mass: 0.5,\n  cost: 0.1\n}, {\n  name: 'Autodoc',\n  type: 'autodoc',\n  mass: 1.5,\n  cost: 0.05\n}, {\n  name: 'Medical Bay',\n  type: 'medical_bay',\n  mass: 4,\n  cost: 2\n}, {\n  name: 'Surgical Bay',\n  type: 'surgical_bay',\n  mass: 5,\n  cost: 8\n}, {\n  name: 'Medical Garden',\n  type: 'medical_garden',\n  mass: 4,\n  cost: 1\n}, {\n  name: 'Library',\n  type: 'library',\n  mass: 1,\n  cost: 0.1\n}, {\n  name: 'Range',\n  type: 'range',\n  mass: 2,\n  cost: 2\n}, {\n  name: 'Club',\n  type: 'club',\n  mass: 3,\n  cost: 0.1\n}, {\n  name: 'Park',\n  type: 'park',\n  mass: 6,\n  cost: 1\n}];\nexport var CARGO_TYPES = [{\n  name: 'Cargo Bay',\n  type: 'cargo_bay',\n  costPerTon: 0\n}, {\n  name: 'Spares',\n  type: 'spares',\n  costPerTon: 0.5\n}, {\n  name: 'Cold Storage Bay',\n  type: 'cold_storage_bay',\n  costPerTon: 0.2\n}, {\n  name: 'Data Storage Bay',\n  type: 'data_storage_bay',\n  costPerTon: 0.3\n}, {\n  name: 'Secure Storage Bay',\n  type: 'secure_storage_bay',\n  costPerTon: 0.7\n}, {\n  name: 'Vacuum Bay',\n  type: 'vacuum_bay',\n  costPerTon: 0.2\n}, {\n  name: 'Livestock Bay',\n  type: 'livestock_bay',\n  costPerTon: 2\n}, {\n  name: 'Live Plant Bay',\n  type: 'live_plant_bay',\n  costPerTon: 1\n}];\nexport var VEHICLE_TYPES = [{\n  name: 'Honey Badger Off-Roader',\n  type: 'honey_badger_off_roader',\n  mass: 4,\n  cost: 0.052436,\n  techLevel: 12,\n  serviceStaff: 1\n}, {\n  name: 'All-Terrain Vehicle tracked',\n  type: 'atv_tracked',\n  mass: 10,\n  cost: 0.195,\n  techLevel: 12,\n  serviceStaff: 1\n}, {\n  name: 'All-Terrain Vehicle wheeled',\n  type: 'atv_wheeled',\n  mass: 10,\n  cost: 0.23,\n  techLevel: 12,\n  serviceStaff: 1\n}, {\n  name: 'Air/Raft Truck',\n  type: 'air_raft_truck',\n  mass: 5,\n  cost: 0.55,\n  techLevel: 12,\n  serviceStaff: 1\n}, {\n  name: 'Open Top Air/Raft',\n  type: 'open_top_air_raft',\n  mass: 4,\n  cost: 0.045,\n  techLevel: 8,\n  serviceStaff: 1\n}];\nexport var DRONE_TYPES = [{\n  name: 'War',\n  type: 'war',\n  mass: 10,\n  cost: 2\n}, {\n  name: 'Repair',\n  type: 'repair',\n  mass: 10,\n  cost: 1\n}, {\n  name: 'Rescue',\n  type: 'rescue',\n  mass: 10,\n  cost: 0.5\n}, {\n  name: 'Sensor',\n  type: 'sensor',\n  mass: 1,\n  cost: 1\n}, {\n  name: 'Comms',\n  type: 'comms',\n  mass: 0.1,\n  cost: 0.2\n}, {\n  name: 'Centurion Security Robot',\n  type: 'centurion_security_robot',\n  mass: 0.5,\n  cost: 0.12\n}, {\n  name: 'Robodog Assault Bot',\n  type: 'robodog_assault_bot',\n  mass: 0.5,\n  cost: 0.012\n}, {\n  name: 'ATLAS Combat Droid',\n  type: 'atlas_combat_droid',\n  mass: 1,\n  cost: 0.024\n}];\nexport var COMMS_SENSORS_TYPES = [{\n  name: 'Standard',\n  type: 'standard',\n  mass: 0,\n  cost: 0\n}, {\n  name: 'Improved',\n  type: 'improved',\n  mass: 1,\n  cost: 2\n}, {\n  name: 'Advanced',\n  type: 'advanced',\n  mass: 2,\n  cost: 3\n}, {\n  name: 'Superior',\n  type: 'superior',\n  mass: 3,\n  cost: 4\n}];\nexport function calculateJumpFuel(shipTonnage, jumpPerformance) {\n  return shipTonnage * jumpPerformance * 0.1;\n}\nexport function calculateManeuverFuel(shipTonnage, maneuverPerformance, weeks) {\n  return shipTonnage * maneuverPerformance * 0.01 * weeks;\n}\nexport function calculateTotalFuelMass(shipTonnage, jumpPerformance, maneuverPerformance, weeks) {\n  var jumpFuel = calculateJumpFuel(shipTonnage, jumpPerformance);\n  var maneuverFuel = calculateManeuverFuel(shipTonnage, maneuverPerformance, weeks);\n  return jumpFuel + maneuverFuel;\n}\nexport function getBridgeMassAndCost(shipTonnage, isHalfBridge) {\n  var mass;\n  var cost;\n  if (shipTonnage <= 200) {\n    mass = isHalfBridge ? 10 : 20;\n    cost = isHalfBridge ? 0.25 : 0.5;\n  } else if (shipTonnage <= 1000) {\n    mass = isHalfBridge ? 10 : 20;\n    cost = isHalfBridge ? 0.5 : 1;\n  } else {\n    mass = isHalfBridge ? 20 : 40;\n    cost = isHalfBridge ? 1 : 2;\n  }\n  return {\n    mass: mass,\n    cost: cost\n  };\n}\nexport function convertTechLevelToNumber(techLevel) {\n  var techLevelMap = {\n    'A': 10,\n    'B': 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15,\n    'G': 16,\n    'H': 17\n  };\n  return techLevelMap[techLevel] || 10;\n}\nexport function getAvailableVehicles(shipTechLevel) {\n  var shipTL = convertTechLevelToNumber(shipTechLevel);\n  return VEHICLE_TYPES.filter(function (vehicle) {\n    return vehicle.techLevel <= shipTL;\n  });\n}\nexport function calculateVehicleServiceStaff(vehicles) {\n  var totalServiceStaff = 0;\n  var _loop = function _loop(vehicle) {\n    var vehicleType = VEHICLE_TYPES.find(function (vt) {\n      return vt.type === vehicle.vehicle_type;\n    });\n    if (vehicleType) {\n      totalServiceStaff += vehicle.quantity * vehicleType.serviceStaff;\n    }\n  };\n  for (var vehicle of vehicles) {\n    _loop(vehicle);\n  }\n  return totalServiceStaff;\n}\nexport function calculateDroneServiceStaff(drones) {\n  var heavyDroneTonnage = 0;\n  var lightDroneTonnage = 0;\n  var _loop2 = function _loop2(drone) {\n    var droneType = DRONE_TYPES.find(function (dt) {\n      return dt.type === drone.drone_type;\n    });\n    if (droneType) {\n      var droneTonnage = droneType.mass * drone.quantity;\n      if (droneType.mass >= 10) {\n        heavyDroneTonnage += droneTonnage;\n      } else {\n        lightDroneTonnage += droneTonnage;\n      }\n    }\n  };\n  for (var drone of drones) {\n    _loop2(drone);\n  }\n  var heavyDroneStaff = Math.ceil(heavyDroneTonnage / 100);\n  var lightDroneStaff = Math.ceil(lightDroneTonnage / 20);\n  return heavyDroneStaff + lightDroneStaff;\n}\nexport function calculateMedicalStaff(facilities) {\n  var nurses = 0;\n  var surgeons = 0;\n  var techs = 0;\n  for (var facility of facilities) {\n    switch (facility.facility_type) {\n      case 'first_aid_station':\n        break;\n      case 'autodoc':\n        techs += facility.quantity;\n        break;\n      case 'medical_bay':\n        nurses += facility.quantity;\n        break;\n      case 'surgical_bay':\n        surgeons += facility.quantity;\n        nurses += facility.quantity;\n        break;\n      case 'medical_garden':\n        break;\n    }\n  }\n  return {\n    nurses: nurses,\n    surgeons: surgeons,\n    techs: techs\n  };\n}","map":{"version":3,"names":["TECH_LEVELS","HULL_SIZES","tonnage","code","cost","WEAPON_TYPES","name","mass","DEFENSE_TYPES","type","BERTH_TYPES","required","FACILITY_TYPES","CARGO_TYPES","costPerTon","VEHICLE_TYPES","techLevel","serviceStaff","DRONE_TYPES","COMMS_SENSORS_TYPES","calculateJumpFuel","shipTonnage","jumpPerformance","calculateManeuverFuel","maneuverPerformance","weeks","calculateTotalFuelMass","jumpFuel","maneuverFuel","getBridgeMassAndCost","isHalfBridge","convertTechLevelToNumber","techLevelMap","getAvailableVehicles","shipTechLevel","shipTL","filter","vehicle","calculateVehicleServiceStaff","vehicles","totalServiceStaff","_loop","vehicleType","find","vt","vehicle_type","quantity","calculateDroneServiceStaff","drones","heavyDroneTonnage","lightDroneTonnage","_loop2","drone","droneType","dt","drone_type","droneTonnage","heavyDroneStaff","Math","ceil","lightDroneStaff","calculateMedicalStaff","facilities","nurses","surgeons","techs","facility","facility_type"],"sources":["/mnt/c/users/Dave/play/aid/starship-designer-rn/src/data/constants.ts"],"sourcesContent":["// Core constants and calculations for Starship Designer React Native\n\nexport const TECH_LEVELS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n\nexport const HULL_SIZES = [\n  { tonnage: 100, code: '1', cost: 2 },\n  { tonnage: 200, code: '2', cost: 8 },\n  { tonnage: 300, code: '3', cost: 12 },\n  { tonnage: 400, code: '4', cost: 16 },\n  { tonnage: 500, code: '5', cost: 32 },\n  { tonnage: 600, code: '6', cost: 48 },\n  { tonnage: 700, code: '7', cost: 64 },\n  { tonnage: 800, code: '8', cost: 80 },\n  { tonnage: 900, code: '9', cost: 90 },\n  { tonnage: 1000, code: 'A', cost: 100 },\n  { tonnage: 1200, code: 'C', cost: 120 },\n  { tonnage: 1400, code: 'E', cost: 140 },\n  { tonnage: 1600, code: 'G', cost: 160 },\n  { tonnage: 1800, code: 'J', cost: 180 },\n  { tonnage: 2000, code: 'L', cost: 200 }\n];\n\nexport const WEAPON_TYPES = [\n  { name: 'Hard Point', mass: 0, cost: 0.2 },\n  { name: 'Single Turret', mass: 1, cost: 0.5 },\n  { name: 'Double Turret', mass: 1, cost: 1 },\n  { name: 'Triple Turret', mass: 1, cost: 2 },\n  { name: 'Beam Laser', mass: 1, cost: 1 },\n  { name: 'Pulse Laser', mass: 1, cost: 2 },\n  { name: 'Particle Beam', mass: 1, cost: 4 },\n  { name: 'Fusion Gun', mass: 1, cost: 8 },\n  { name: 'Meson Gun', mass: 5, cost: 50 },\n  { name: 'Missile Rack', mass: 0.5, cost: 0.75 },\n  { name: 'Torpedo Tube', mass: 1, cost: 1.5 }\n];\n\nexport const DEFENSE_TYPES = [\n  { name: 'Sandcaster Turret', type: 'sandcaster_turret', mass: 1, cost: 1.3 },\n  { name: 'Dual Sandcaster Turret', type: 'dual_sandcaster_turret', mass: 1, cost: 1.5 },\n  { name: 'Triple Sandcaster Turret', type: 'triple_sandcaster_turret', mass: 1, cost: 1.8 },\n  { name: 'Point Defense Laser Turret', type: 'point_defense_laser_turret', mass: 1, cost: 1 },\n  { name: 'Dual Point Defense Laser Turret', type: 'dual_point_defense_laser_turret', mass: 1, cost: 1.5 }\n];\n\nexport const BERTH_TYPES = [\n  { name: 'Staterooms', type: 'staterooms', mass: 4, cost: 0.5, required: true },\n  { name: 'Luxury Staterooms', type: 'luxury_staterooms', mass: 5, cost: 0.6, required: false },\n  { name: 'Low Berths', type: 'low_berths', mass: 0.5, cost: 0.05, required: false },\n  { name: 'Emergency Low', type: 'emergency_low_berth', mass: 1, cost: 1, required: false }\n];\n\nexport const FACILITY_TYPES = [\n  { name: 'Gym', type: 'gym', mass: 3, cost: 0.1 },\n  { name: 'Spa', type: 'spa', mass: 1.5, cost: 0.2 },\n  { name: 'Garden', type: 'garden', mass: 4, cost: 0.05 },\n  { name: 'Commissary', type: 'commissary', mass: 2, cost: 0.2, required: true },\n  { name: 'Kitchens', type: 'kitchens', mass: 3, cost: 0.4 },\n  { name: 'Officers Mess & Bar', type: 'officers_mess_bar', mass: 4, cost: 0.3 },\n  { name: 'First Aid Station', type: 'first_aid_station', mass: 0.5, cost: 0.1 },\n  { name: 'Autodoc', type: 'autodoc', mass: 1.5, cost: 0.05 },\n  { name: 'Medical Bay', type: 'medical_bay', mass: 4, cost: 2 },\n  { name: 'Surgical Bay', type: 'surgical_bay', mass: 5, cost: 8 },\n  { name: 'Medical Garden', type: 'medical_garden', mass: 4, cost: 1 },\n  { name: 'Library', type: 'library', mass: 1, cost: 0.1 },\n  { name: 'Range', type: 'range', mass: 2, cost: 2 },\n  { name: 'Club', type: 'club', mass: 3, cost: 0.1 },\n  { name: 'Park', type: 'park', mass: 6, cost: 1 }\n];\n\nexport const CARGO_TYPES = [\n  { name: 'Cargo Bay', type: 'cargo_bay', costPerTon: 0 },\n  { name: 'Spares', type: 'spares', costPerTon: 0.5 },\n  { name: 'Cold Storage Bay', type: 'cold_storage_bay', costPerTon: 0.2 },\n  { name: 'Data Storage Bay', type: 'data_storage_bay', costPerTon: 0.3 },\n  { name: 'Secure Storage Bay', type: 'secure_storage_bay', costPerTon: 0.7 },\n  { name: 'Vacuum Bay', type: 'vacuum_bay', costPerTon: 0.2 },\n  { name: 'Livestock Bay', type: 'livestock_bay', costPerTon: 2 },\n  { name: 'Live Plant Bay', type: 'live_plant_bay', costPerTon: 1 }\n];\n\nexport const VEHICLE_TYPES = [\n  { name: 'Honey Badger Off-Roader', type: 'honey_badger_off_roader', mass: 4, cost: 0.052436, techLevel: 12, serviceStaff: 1 },\n  { name: 'All-Terrain Vehicle tracked', type: 'atv_tracked', mass: 10, cost: 0.195, techLevel: 12, serviceStaff: 1 },\n  { name: 'All-Terrain Vehicle wheeled', type: 'atv_wheeled', mass: 10, cost: 0.23, techLevel: 12, serviceStaff: 1 },\n  { name: 'Air/Raft Truck', type: 'air_raft_truck', mass: 5, cost: 0.55, techLevel: 12, serviceStaff: 1 },\n  { name: 'Open Top Air/Raft', type: 'open_top_air_raft', mass: 4, cost: 0.045, techLevel: 8, serviceStaff: 1 }\n];\n\nexport const DRONE_TYPES = [\n  { name: 'War', type: 'war', mass: 10, cost: 2 },\n  { name: 'Repair', type: 'repair', mass: 10, cost: 1 },\n  { name: 'Rescue', type: 'rescue', mass: 10, cost: 0.5 },\n  { name: 'Sensor', type: 'sensor', mass: 1, cost: 1 },\n  { name: 'Comms', type: 'comms', mass: 0.1, cost: 0.2 },\n  { name: 'Centurion Security Robot', type: 'centurion_security_robot', mass: 0.5, cost: 0.12 },\n  { name: 'Robodog Assault Bot', type: 'robodog_assault_bot', mass: 0.5, cost: 0.012 },\n  { name: 'ATLAS Combat Droid', type: 'atlas_combat_droid', mass: 1, cost: 0.024 }\n];\n\nexport const COMMS_SENSORS_TYPES = [\n  { name: 'Standard', type: 'standard', mass: 0, cost: 0 },\n  { name: 'Improved', type: 'improved', mass: 1, cost: 2 },\n  { name: 'Advanced', type: 'advanced', mass: 2, cost: 3 },\n  { name: 'Superior', type: 'superior', mass: 3, cost: 4 }\n];\n\n// Calculation functions\nexport function calculateJumpFuel(shipTonnage: number, jumpPerformance: number): number {\n  return shipTonnage * jumpPerformance * 0.1;\n}\n\nexport function calculateManeuverFuel(shipTonnage: number, maneuverPerformance: number, weeks: number): number {\n  return (shipTonnage * maneuverPerformance * 0.01) * weeks;\n}\n\nexport function calculateTotalFuelMass(shipTonnage: number, jumpPerformance: number, maneuverPerformance: number, weeks: number): number {\n  const jumpFuel = calculateJumpFuel(shipTonnage, jumpPerformance);\n  const maneuverFuel = calculateManeuverFuel(shipTonnage, maneuverPerformance, weeks);\n  return jumpFuel + maneuverFuel;\n}\n\nexport function getBridgeMassAndCost(shipTonnage: number, isHalfBridge: boolean) {\n  let mass: number;\n  let cost: number;\n\n  if (shipTonnage <= 200) {\n    mass = isHalfBridge ? 10 : 20;\n    cost = isHalfBridge ? 0.25 : 0.5;\n  } else if (shipTonnage <= 1000) {\n    mass = isHalfBridge ? 10 : 20;\n    cost = isHalfBridge ? 0.5 : 1;\n  } else {\n    mass = isHalfBridge ? 20 : 40;\n    cost = isHalfBridge ? 1 : 2;\n  }\n\n  return { mass, cost };\n}\n\nexport function convertTechLevelToNumber(techLevel: string): number {\n  const techLevelMap: { [key: string]: number } = {\n    'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17\n  };\n  return techLevelMap[techLevel] || 10;\n}\n\nexport function getAvailableVehicles(shipTechLevel: string): typeof VEHICLE_TYPES {\n  const shipTL = convertTechLevelToNumber(shipTechLevel);\n  return VEHICLE_TYPES.filter(vehicle => vehicle.techLevel <= shipTL);\n}\n\nexport function calculateVehicleServiceStaff(vehicles: { vehicle_type: string; quantity: number }[]): number {\n  let totalServiceStaff = 0;\n  \n  for (const vehicle of vehicles) {\n    const vehicleType = VEHICLE_TYPES.find(vt => vt.type === vehicle.vehicle_type);\n    if (vehicleType) {\n      totalServiceStaff += vehicle.quantity * vehicleType.serviceStaff;\n    }\n  }\n  \n  return totalServiceStaff;\n}\n\nexport function calculateDroneServiceStaff(drones: { drone_type: string; quantity: number }[]): number {\n  let heavyDroneTonnage = 0; // 10 ton drones\n  let lightDroneTonnage = 0; // less than 10 ton drones\n  \n  for (const drone of drones) {\n    const droneType = DRONE_TYPES.find(dt => dt.type === drone.drone_type);\n    if (droneType) {\n      const droneTonnage = droneType.mass * drone.quantity;\n      if (droneType.mass >= 10) {\n        heavyDroneTonnage += droneTonnage;\n      } else {\n        lightDroneTonnage += droneTonnage;\n      }\n    }\n  }\n  \n  // Heavy drones (10+ tons): 1 staff per 100 tons\n  const heavyDroneStaff = Math.ceil(heavyDroneTonnage / 100);\n  \n  // Light drones (<10 tons): 1 staff per 20 tons\n  const lightDroneStaff = Math.ceil(lightDroneTonnage / 20);\n  \n  return heavyDroneStaff + lightDroneStaff;\n}\n\nexport function calculateMedicalStaff(facilities: { facility_type: string; quantity: number }[]): { nurses: number; surgeons: number; techs: number } {\n  let nurses = 0;\n  let surgeons = 0;\n  let techs = 0;\n\n  for (const facility of facilities) {\n    switch (facility.facility_type) {\n      case 'first_aid_station':\n        // First aid stations don't require staff\n        break;\n      case 'autodoc':\n        techs += facility.quantity;\n        break;\n      case 'medical_bay':\n        nurses += facility.quantity;\n        break;\n      case 'surgical_bay':\n        surgeons += facility.quantity;\n        nurses += facility.quantity; // Surgical bays also need nurses\n        break;\n      case 'medical_garden':\n        // Medical gardens don't require dedicated staff\n        break;\n    }\n  }\n\n  return { nurses, surgeons, techs };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}