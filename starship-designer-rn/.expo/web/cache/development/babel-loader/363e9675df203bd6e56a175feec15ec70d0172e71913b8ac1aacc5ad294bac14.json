{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar SHIPS_KEY = 'starship_designs';\nexport var StorageService = function () {\n  function StorageService() {\n    _classCallCheck(this, StorageService);\n  }\n  return _createClass(StorageService, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(function* () {\n        try {\n          yield AsyncStorage.getItem(SHIPS_KEY);\n        } catch (error) {\n          console.error('Error initializing storage:', error);\n          throw error;\n        }\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"saveShip\",\n    value: function () {\n      var _saveShip = _asyncToGenerator(function* (shipDesign) {\n        try {\n          var existingShips = yield this.getAllShips();\n          var shipIndex = existingShips.findIndex(function (ship) {\n            return ship.ship.name === shipDesign.ship.name;\n          });\n          if (shipIndex >= 0) {\n            existingShips[shipIndex] = shipDesign;\n          } else {\n            existingShips.push(shipDesign);\n          }\n          yield AsyncStorage.setItem(SHIPS_KEY, JSON.stringify(existingShips));\n        } catch (error) {\n          console.error('Error saving ship:', error);\n          throw new Error('Failed to save ship design');\n        }\n      });\n      function saveShip(_x) {\n        return _saveShip.apply(this, arguments);\n      }\n      return saveShip;\n    }()\n  }, {\n    key: \"getAllShips\",\n    value: function () {\n      var _getAllShips = _asyncToGenerator(function* () {\n        try {\n          var shipsData = yield AsyncStorage.getItem(SHIPS_KEY);\n          if (shipsData) {\n            return JSON.parse(shipsData);\n          }\n          return [];\n        } catch (error) {\n          console.error('Error getting all ships:', error);\n          return [];\n        }\n      });\n      function getAllShips() {\n        return _getAllShips.apply(this, arguments);\n      }\n      return getAllShips;\n    }()\n  }, {\n    key: \"getShipByName\",\n    value: function () {\n      var _getShipByName = _asyncToGenerator(function* (name) {\n        try {\n          var ships = yield this.getAllShips();\n          return ships.find(function (ship) {\n            return ship.ship.name === name;\n          }) || null;\n        } catch (error) {\n          console.error('Error getting ship by name:', error);\n          return null;\n        }\n      });\n      function getShipByName(_x2) {\n        return _getShipByName.apply(this, arguments);\n      }\n      return getShipByName;\n    }()\n  }, {\n    key: \"deleteShip\",\n    value: function () {\n      var _deleteShip = _asyncToGenerator(function* (name) {\n        try {\n          var ships = yield this.getAllShips();\n          var filteredShips = ships.filter(function (ship) {\n            return ship.ship.name !== name;\n          });\n          yield AsyncStorage.setItem(SHIPS_KEY, JSON.stringify(filteredShips));\n        } catch (error) {\n          console.error('Error deleting ship:', error);\n          throw new Error('Failed to delete ship');\n        }\n      });\n      function deleteShip(_x3) {\n        return _deleteShip.apply(this, arguments);\n      }\n      return deleteShip;\n    }()\n  }, {\n    key: \"hasAnyShips\",\n    value: function () {\n      var _hasAnyShips = _asyncToGenerator(function* () {\n        try {\n          var ships = yield this.getAllShips();\n          return ships.length > 0;\n        } catch (error) {\n          console.error('Error checking for ships:', error);\n          return false;\n        }\n      });\n      function hasAnyShips() {\n        return _hasAnyShips.apply(this, arguments);\n      }\n      return hasAnyShips;\n    }()\n  }, {\n    key: \"checkShipNameExists\",\n    value: function () {\n      var _checkShipNameExists = _asyncToGenerator(function* (name) {\n        try {\n          var ship = yield this.getShipByName(name);\n          return ship !== null;\n        } catch (error) {\n          console.error('Error checking ship name:', error);\n          return false;\n        }\n      });\n      function checkShipNameExists(_x4) {\n        return _checkShipNameExists.apply(this, arguments);\n      }\n      return checkShipNameExists;\n    }()\n  }, {\n    key: \"clearAllData\",\n    value: function () {\n      var _clearAllData = _asyncToGenerator(function* () {\n        try {\n          yield AsyncStorage.removeItem(SHIPS_KEY);\n        } catch (error) {\n          console.error('Error clearing data:', error);\n          throw new Error('Failed to clear data');\n        }\n      });\n      function clearAllData() {\n        return _clearAllData.apply(this, arguments);\n      }\n      return clearAllData;\n    }()\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!StorageService.instance) {\n        StorageService.instance = new StorageService();\n      }\n      return StorageService.instance;\n    }\n  }]);\n}();\nexport var storageService = StorageService.getInstance();","map":{"version":3,"names":["AsyncStorage","SHIPS_KEY","StorageService","_classCallCheck","_createClass","key","value","_initialize","_asyncToGenerator","getItem","error","console","initialize","apply","arguments","_saveShip","shipDesign","existingShips","getAllShips","shipIndex","findIndex","ship","name","push","setItem","JSON","stringify","Error","saveShip","_x","_getAllShips","shipsData","parse","_getShipByName","ships","find","getShipByName","_x2","_deleteShip","filteredShips","filter","deleteShip","_x3","_hasAnyShips","length","hasAnyShips","_checkShipNameExists","checkShipNameExists","_x4","_clearAllData","removeItem","clearAllData","getInstance","instance","storageService"],"sources":["/mnt/c/users/Dave/play/aid/starship-designer-rn/src/services/storage.ts"],"sourcesContent":["// AsyncStorage service for React Native\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { ShipDesign } from '../types/ship';\n\nconst SHIPS_KEY = 'starship_designs';\n\nexport class StorageService {\n  private static instance: StorageService;\n\n  static getInstance(): StorageService {\n    if (!StorageService.instance) {\n      StorageService.instance = new StorageService();\n    }\n    return StorageService.instance;\n  }\n\n  async initialize(): Promise<void> {\n    // AsyncStorage doesn't need initialization like IndexedDB\n    try {\n      await AsyncStorage.getItem(SHIPS_KEY);\n    } catch (error) {\n      console.error('Error initializing storage:', error);\n      throw error;\n    }\n  }\n\n  async saveShip(shipDesign: ShipDesign): Promise<void> {\n    try {\n      const existingShips = await this.getAllShips();\n      const shipIndex = existingShips.findIndex(ship => ship.ship.name === shipDesign.ship.name);\n      \n      if (shipIndex >= 0) {\n        // Update existing ship\n        existingShips[shipIndex] = shipDesign;\n      } else {\n        // Add new ship\n        existingShips.push(shipDesign);\n      }\n      \n      await AsyncStorage.setItem(SHIPS_KEY, JSON.stringify(existingShips));\n    } catch (error) {\n      console.error('Error saving ship:', error);\n      throw new Error('Failed to save ship design');\n    }\n  }\n\n  async getAllShips(): Promise<ShipDesign[]> {\n    try {\n      const shipsData = await AsyncStorage.getItem(SHIPS_KEY);\n      if (shipsData) {\n        return JSON.parse(shipsData);\n      }\n      return [];\n    } catch (error) {\n      console.error('Error getting all ships:', error);\n      return [];\n    }\n  }\n\n  async getShipByName(name: string): Promise<ShipDesign | null> {\n    try {\n      const ships = await this.getAllShips();\n      return ships.find(ship => ship.ship.name === name) || null;\n    } catch (error) {\n      console.error('Error getting ship by name:', error);\n      return null;\n    }\n  }\n\n  async deleteShip(name: string): Promise<void> {\n    try {\n      const ships = await this.getAllShips();\n      const filteredShips = ships.filter(ship => ship.ship.name !== name);\n      await AsyncStorage.setItem(SHIPS_KEY, JSON.stringify(filteredShips));\n    } catch (error) {\n      console.error('Error deleting ship:', error);\n      throw new Error('Failed to delete ship');\n    }\n  }\n\n  async hasAnyShips(): Promise<boolean> {\n    try {\n      const ships = await this.getAllShips();\n      return ships.length > 0;\n    } catch (error) {\n      console.error('Error checking for ships:', error);\n      return false;\n    }\n  }\n\n  async checkShipNameExists(name: string): Promise<boolean> {\n    try {\n      const ship = await this.getShipByName(name);\n      return ship !== null;\n    } catch (error) {\n      console.error('Error checking ship name:', error);\n      return false;\n    }\n  }\n\n  async clearAllData(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(SHIPS_KEY);\n    } catch (error) {\n      console.error('Error clearing data:', error);\n      throw new Error('Failed to clear data');\n    }\n  }\n}\n\nexport const storageService = StorageService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}